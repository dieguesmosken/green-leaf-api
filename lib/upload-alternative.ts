/**
 * Solu√ß√£o alternativa para upload de avatar usando uploadBytesResumable
 * Esta fun√ß√£o resolve problemas de autentica√ß√£o do Storage
 */

import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage"
import { storage, auth } from "@/lib/firebase"

export const uploadAvatarAlternative = async (uid: string, file: File): Promise<string> => {
  return new Promise(async (resolve, reject) => {
    try {
      console.log("üöÄ Upload alternativo iniciado...")
      
      // Verificar autentica√ß√£o m√∫ltiplas vezes
      let authAttempts = 0
      const maxAuthAttempts = 5
      
      while (authAttempts < maxAuthAttempts) {
        authAttempts++
        console.log(`üîê Verifica√ß√£o de auth ${authAttempts}/${maxAuthAttempts}`)
        
        const currentUser = auth.currentUser
        if (currentUser && currentUser.uid === uid) {
          console.log("‚úÖ Usu√°rio autenticado confirmado")
          break
        }
        
        if (authAttempts === maxAuthAttempts) {
          reject(new Error("Falha na verifica√ß√£o de autentica√ß√£o"))
          return
        }
        
        // Aguardar antes da pr√≥xima tentativa
        await new Promise(resolve => setTimeout(resolve, 500))
      }
      
      // For√ßar refresh do token
      console.log("üîÑ Refreshing token...")
      const user = auth.currentUser!
      await user.reload()
      const token = await user.getIdToken(true)
      console.log("üîë Token refreshed:", !!token)
      
      // Aguardar propaga√ß√£o do token
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // Criar refer√™ncia com timestamp √∫nico
      const timestamp = Date.now()
      const fileName = `avatar_${timestamp}_${file.name.replace(/[^a-zA-Z0-9.]/g, '_')}`
      const storageRef = ref(storage, `avatars/${uid}/${fileName}`)
      
      console.log("üìÅ Upload path:", `avatars/${uid}/${fileName}`)
      
      // Usar uploadBytesResumable para melhor controle
      const uploadTask = uploadBytesResumable(storageRef, file)
      
      uploadTask.on(
        'state_changed',
        (snapshot) => {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100
          console.log(`üìä Upload progress: ${progress.toFixed(1)}%`)
        },
        (error) => {
          console.error("‚ùå Upload error:", error.code, error.message)
          reject(error)
        },
        async () => {
          try {
            console.log("‚úÖ Upload completed, getting download URL...")
            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref)
            console.log("üîó Download URL:", downloadURL)
            resolve(downloadURL)
          } catch (urlError) {
            console.error("‚ùå Error getting download URL:", urlError)
            reject(urlError)
          }
        }
      )
      
    } catch (error) {
      console.error("‚ùå Fatal error in alternative upload:", error)
      reject(error)
    }
  })
}
